/*
    |  ESC, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, -, =, \, `.
    |    TAB, q, w, e, r, t, y, u, i, o, p, [, ], BACKSPACE,
    |CAPSLOCK, a, s, d, f, g, h, j, k, l, ;, ', ENTER,
    |    LSHIFT, z, x, c, v, b, n, m, ,, ., /, RHSIFT, FN
    |LCRTL, CODE, LALT, SPACE, FN, CODE, RCRTL

	  (
		KC_ESC, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7, KC_8, KC_9, KC_0, KC_MINS, KC_EQL, KC_BSLS, 
		KC_TAB, KC_Q, KC_W, KC_E, KC_R, KC_T, KC_Y, KC_U, KC_I, KC_O, KC_P, KC_LBRC, KC_RBRC, KC_BSPC, 
		KC_CAPS, KC_A, KC_S, KC_D, KC_F, KC_G, KC_H, KC_J, KC_K, KC_L, KC_SCLN, KC_QUOT, KC_ENT, 
		KC_LSFT, KC_Z, KC_X, KC_C, KC_V, KC_B, KC_N, KC_M, KC_COMM, KC_DOT, KC_SLSH, MO(1), KC_LSFT, 
		KC_LCTL, KC_LGUI, KC_LALT, KC_SPC, KC_GRV, KC_RALT, KC_RGUI, KC_MENU, KC_RCTL
    )

    EXAMPLE:
    char layout[4][4] = {
      {'l',']','=','/'},
      {'7','8','9','*'},
      {'4','5','6','-'},
      {'1','2','3','+'},
    }

*/

Row layout
9 - ESC, 1, 2, 3, 4, 5, 6
1 - 7, 8, 9, 0, -, =, \, `
8 - TAB, q, w, e, r, t, y
0 - u, i, o, p, [, ], BACKSPACE
7 - CAPSLOCK, a, s, d, f, g, h
2 - j, k, l, ;, ', ENTER
6 - LSHIFT, z, x, c, v, b
3 - n, m, ,, ., /, RHSIFT, FN
5 - LCRTL, CODE, LALT
4 - SPACE, FN, CODE, RCRTL

Row layout v2 - revserse, left to right from pcb side
1 - `, \, =, -, 0, 9, 8, 7
9 - 6, 5, 4, 3, 2, 1, ESC
0 - BACKSPACE, ], [, p, o, i, u
8 - y, t, r, e, w, q, TAB
2 - ENTER, ', ;, l, k, j
7 - h, g, f, d, s, a, CAPSLOCK
3 - FN, RHSIFT, /, ., ,, m, n
6 - b, v, c, x, z, LSHIFT
4 - RCRTL, CODE, FN, SPACE
5 - LALT, CODE, LCRTL

Row layout with ' ' 
'`', '\', '=', '-', '0', '9', '8', '7'      // 1
'6', '5', '4', '3', '2', '1', 'ESC'         // 9
'BACKSPACE', ']', '[', 'p', 'o', 'i', 'u'   // 0
'y', 't', 'r', 'e', 'w', 'q', 'TAB'       // 8
'ENTER', ''', ';', 'l', 'k', 'j'        // 2
'h', 'g', 'f', 'd', 's', 'a', 'CAPSLOCK'  // 7
'FN', 'RHSIFT', '/', '.', ',', 'm', 'n'   // 3
'b', 'v', 'c', 'x', 'z', 'LSHIFT'       // 6
'RCRTL', 'CODE', 'FN', 'SPACE'      // 4
'LALT', 'CODE', 'LCRTL'           // 5

TEMP - Row layout with ' ' 
'`', '\', '=', '-', '0', '9', '8', '7'    // 1
'6', '5', '4', '3', '2', '1', 'E'         // 9
'B', ']', '[', 'p', 'o', 'i', 'u'         // 0
'y', 't', 'r', 'e', 'w', 'q', 'T'         // 8
'E', ''', ';', 'l', 'k', 'j'              // 2
'h', 'g', 'f', 'd', 's', 'a', 'C'         // 7
'F', 'R', '/', '.', ',', 'm', 'n'         // 3
'b', 'v', 'c', 'x', 'z', 'L'              // 6
'R', 'W', 'F', 'S'                        // 4
'L', 'W', 'L'                             // 5

TEMP - Row + col:

 21   20   19   18   15   14   16   10
'`', '\', '=', '-', '0', '9', '8', '7'         // 1
'N', '6', '5', '4', '3', '2', '1', 'E'         // 9
'B', 'N', ']', '[', 'p', 'o', 'i', 'u'         // 0
'N', 'y', 't', 'r', 'e', 'w', 'q', 'T'         // 8
'E', 'N', 'N', ''', ';', 'l', 'k', 'j'         // 2
'N', 'h', 'g', 'f', 'd', 's', 'a', 'C'         // 7
'F', 'N', 'R', '/', '.', ',', 'm', 'n'         // 3
'N', 'b', 'v', 'c', 'x', 'z', 'N', 'L'         // 6
'R', 'N', 'W', 'F', 'N', 'N', 'N', 'S'         // 4
'N', 'N', 'N', 'N', 'L', 'N', 'W', 'L'         // 5


char keymap[inCount][outCount] = {
  // 21   20   19   18   15   14   16   10
  '`', '\\', '=', '-', '0', '9', '8', '7',  // 1
  'N', '6', '5', '4', '3', '2', '1', 'E',   // 9
  'B', 'N', ']', '[', 'p', 'o', 'i', 'u',   // 0
  'N', 'y', 't', 'r', 'e', 'w', 'q', 'T',   // 8
  'E', 'N', 'N', '\'', ';', 'l', 'k', 'j',  // 2
  'N', 'h', 'g', 'f', 'd', 's', 'a', 'C',   // 7
  'F', 'N', 'R', '/', '.', ',', 'm', 'n',   // 3
  'N', 'b', 'v', 'c', 'x', 'z', 'N', 'L',   // 6
  'R', 'N', 'W', 'F', 'N', 'N', 'N', 'S',   // 4
  'N', 'N', 'N', 'N', 'L', 'N', 'W', 'L'    // 5
}



`, \, =, -, 0, 9, 8, 7, 
N, 6, 5, 4, 3, 2, 1, E, 
B, N, ], [, p, o, i, u, 
N, y, t, r, e, w, q, T, 
E, N, N, ', ;, l, k, j, 
N, h, g, f, d, s, a, C, 
F, N, R, /, ., ,, m, n, 
N, b, v, c, x, z, N, L, 
R, N, W, F, N, N, N, S, 
N, N, N, N, L, N, W, L, 

const char keymap[outCount][inCount] = {
  // 21   20   19   18   15   14   16   10
  { '`', '\\', '=', '-', '0', '9', '8', '7' },  // 1
  { 'N', '6', '5', '4', '3', '2', '1', 'E' },   // 9
  { 'B', 'N', ']', '[', 'p', 'o', 'i', 'u' },   // 0
  { 'N', 'y', 't', 'r', 'e', 'w', 'q', 'T' },   // 8
  { 'E', 'N', 'N', '\'', ';', 'l', 'k', 'j' },  // 2
  { 'N', 'h', 'g', 'f', 'd', 's', 'a', 'C' },   // 7
  { 'F', 'N', 'R', '/', '.', ',', 'm', 'n' },   // 3
  { 'N', 'b', 'v', 'c', 'x', 'z', 'N', 'L' },   // 6
  { 'R', 'N', 'W', 'F', 'N', 'N', 'N', 'S' },   // 4
  { 'N', 'N', 'N', 'N', 'L', 'N', 'W', 'L' },   // 5
};

const char singleKeymap[outCount][inCount] = {
  // 21   20   19   18   15   14   16   10
  { '`', '\\', '=', '-', '0', '9', '8', '7' },  // 1
  { NULL, '6', '5', '4', '3', '2', '1', NULL },   // 9
  { NULL, NULL, ']', '[', 'p', 'o', 'i', 'u' },   // 0
  { NULL, 'y', 't', 'r', 'e', 'w', 'q', NULL },   // 8
  { NULL, NULL, NULL, '\'', ';', 'l', 'k', 'j' },  // 2
  { NULL, 'h', 'g', 'f', 'd', 's', 'a', NULL },   // 7
  { NULL, NULL, NULL, '/', '.', ',', 'm', 'n' },   // 3
  { NULL, 'b', 'v', 'c', 'x', 'z', NULL, 'L' },   // 6
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL },   // 4
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL },   // 5
};

const char keymap[outCount][inCount] = {
  // 21   20   19   18   15   14   16   10
  { '`', '\\', '=', '-', '0', '9', '8', '7' },  // 1
  { 'N', '6', '5', '4', '3', '2', '1', 'E' },   // 9
  { 'B', 'N', ']', '[', 'p', 'o', 'i', 'u' },   // 0
  { 'N', 'y', 't', 'r', 'e', 'w', 'q', 'T' },   // 8
  { 'E', 'N', 'N', '\'', ';', 'l', 'k', 'j' },  // 2
  { 'N', 'h', 'g', 'f', 'd', 's', 'a', 'C' },   // 7
  { 'F', 'N', 'R', '/', '.', ',', 'm', 'n' },   // 3
  { 'N', 'b', 'v', 'c', 'x', 'z', 'N', 'L' },   // 6
  { 'R', 'N', 'W', 'F', 'N', 'N', 'N', 'S' },   // 4
  { 'N', 'N', 'N', 'N', 'L', 'N', 'W', 'L' },   // 5
};

const int keymap[outCount][inCount] = {
  // 21   20   19   18   15   14   16   10
  { '`', '\\', '=', '-', '0', '9', '8', '7' },  // 1
  { 'N', '6', '5', '4', '3', '2', '1', KEY_ESC },   // 9
  { KEY_BACKSPACE, 'N', ']', '[', 'p', 'o', 'i', 'u' },   // 0
  { 'N', 'y', 't', 'r', 'e', 'w', 'q', KEY_TAB },   // 8
  { KEY_RETURN, 'N', 'N', '\'', ';', 'l', 'k', 'j' },  // 2
  { 'N', 'h', 'g', 'f', 'd', 's', 'a', KEY_CAPS_LOCK },   // 7
  { 'KEY_KP_ENTER', 'N', KEY_RIGHT_SHIFT, '/', '.', ',', 'm', 'n' },   // 3
  { 'N', 'b', 'v', 'c', 'x', 'z', 'N', KEY_LEFT_SHIFT },   // 6
  { KEY_LEFT_GUI, 'N', KEY_RIGHT_GUI, KEY_RIGHT_ALT, 'N', 'N', 'N', 32},   // 4
  { 'N', 'N', 'N', 'N', KEY_LEFT_ALT, 'N', KEY_LEFT_GUI, KEY_LEFT_CTRL },   // 5
};

const int keymap[outCount][inCount] = {
  // 21   20   19   18   15   14   16   10 (input pins)
  { '`', '\\', '=', '-', '0', '9', '8', '7' },                                  // 1 (output pins)
  { NULL, '6', '5', '4', '3', '2', '1', KEY_ESC },                              // 9
  { KEY_BACKSPACE, NULL, ']', '[', 'p', 'o', 'i', 'u' },                        // 0
  { NULL, 'y', 't', 'r', 'e', 'w', 'q', KEY_TAB },                              // 8
  { KEY_RETURN, NULL, NULL, '\'', ';', 'l', 'k', 'j' },                         // 2
  { NULL, 'h', 'g', 'f', 'd', 's', 'a', KEY_CAPS_LOCK },                        // 7
  { KEY_KP_ENTER, NULL, KEY_RIGHT_SHIFT, '/', '.', ',', 'm', 'n' },             // 3
  { NULL, 'b', 'v', 'c', 'x', 'z', NULL, KEY_LEFT_SHIFT },                      // 6
  { KEY_LEFT_CTRL, NULL, KEY_RIGHT_GUI, KEY_RIGHT_ALT, NULL, NULL, NULL, 32 },  // 4
  { NULL, NULL, NULL, NULL, KEY_LEFT_ALT, NULL, KEY_LEFT_GUI, KEY_LEFT_CTRL },  // 5
};

const int keymap_null[outCount][inCount] = {
  // 21   20   19   18   15   14   16   10 (input pins)
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL },  // 1 (output pins)
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL },  // 9
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL },  // 0
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL },  // 8
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL },  // 2
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL },  // 7
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL },  // 3
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL },  // 6
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL },  // 4
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL },  // 5
};

const int keymap[outCount][inCount] = {
  // 21   20   19   18   15   14   16   10 (input pins)
  { '`', '\\', '=', '-', '0', '9', '8', '7' },                                   // 1 (output pins)
  { NULL, '6', '5', '4', '3', '2', '1', KEY_ESC },                               // 9
  { KEY_BACKSPACE, NULL, ']', '[', 'p', 'o', 'i', 'u' },                         // 0
  { NULL, 'y', 't', 'r', 'e', 'w', 'q', KEY_TAB },                               // 8
  { KEY_RETURN, NULL, NULL, '\'', ';', 'l', 'k', 'j' },                          // 2
  { NULL, 'h', 'g', 'f', 'd', 's', 'a', KEY_CAPS_LOCK },                         // 7
  { KEY_KP_ENTER, NULL, KEY_RIGHT_SHIFT, '/', '.', ',', 'm', 'n' },              // 3
  { NULL, 'b', 'v', 'c', 'x', 'z', NULL, KEY_LEFT_SHIFT },                       // 6
  { KEY_LEFT_CTRL, NULL, KEY_RIGHT_GUI, KEY_RIGHT_ALT, NULL, NULL, NULL, ' ' },  // 4
  { NULL, NULL, NULL, NULL, KEY_LEFT_ALT, NULL, KEY_LEFT_GUI, KEY_LEFT_CTRL },   // 5
};

const int keymap_shift[outCount][inCount] = {
  // 21   20   19   18   15   14   16   10 (input pins)
  { '~', '|', '+', '_', ')', '(', '*', '&' },                                    // 1 (output pins)
  { NULL, '^', '%', '$', '#', '@', '!', '~' },                                   // 9
  { KEY_BACKSPACE, NULL, '}', '{', 'P', 'O', 'I', 'U' },                         // 0
  { NULL, 'Y', 'T', 'R', 'E', 'W', 'Q', KEY_TAB },                               // 8
  { KEY_RETURN, NULL, NULL, '\"', ':', 'L', 'K', 'J' },                          // 2
  { NULL, 'H', 'G', 'F', 'D', 'S', 'A', KEY_CAPS_LOCK },                         // 7
  { KEY_KP_ENTER, NULL, KEY_RIGHT_SHIFT, '?', '>', '<', 'M', 'N' },              // 3
  { NULL, 'B', 'V', 'C', 'X', 'Z', NULL, KEY_LEFT_SHIFT },                       // 6
  { KEY_LEFT_CTRL, NULL, KEY_RIGHT_GUI, KEY_RIGHT_ALT, NULL, NULL, NULL, ' ' },  // 4
  { NULL, NULL, NULL, NULL, KEY_LEFT_ALT, NULL, KEY_LEFT_GUI, KEY_LEFT_CTRL },   // 5
};

const int keymap_fn1[outCount][inCount] = {
  // 21   20   19   18   15   14   16   10 (input pins)
  { NULL, NULL, KEY_F12, KEY_F11, KEY_F10, KEY_F9, KEY_F8, KEY_F7 },  // 1 (output pins)
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, '~' },                  // 9
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL },                 // 0
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL },                 // 8
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL },                 // 2
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL },                 // 7
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL },                 // 3
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL },                 // 6
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL },                 // 4
  { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL },                 // 5
};